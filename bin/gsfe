#!/usr/bin/env ruby

# Add image_fix to images - DONE
# == Remove the A in A(href="#") > IMG patterns
# Add image size into table cell - DONE
# Convert to haml --html-attributes

require 'nokogiri'
require 'open-uri'
require 'pp'

# Get a Nokogiri::HTML::Document for the page weâ€™re interested in...
#
class GSMailer
	def initialize doc
		@document = doc
		@removables = []
		@properties = {}
		return self
	end

	def to_xml
		return @document.to_xml(indent:1, indent_text:"\t")
	end

	def cleanup
		@removables.each do |file|
 			FileUtils.rm_f file
		end
	end

	def add_image_fix
		doc = @document.clone

		doc.css('img').each do |img|
			img['class'] = 'image_fix'
		end

		@document = doc 
		return self
	end

	def fix_link_target
		doc = @document.clone

		doc.css('a').each do |link|
			link['target'] = '_blank'
		end

		@document = doc
		return self
	end

	def fix_img_src
		doc = @document.clone

		doc.css('td img').each do |img|
			# get image width
			img_set_bgcolor = false
			img_src = img['src']

			# analyse image & get colors
			# if only one color, generate a single pixel image.
			# if many colors,  convert to high-quality jpg
			img_props = image_properties img_src

			if img_props[:colors] > 256 then
				img_dest = img_src.gsub(/.png$/,'.jpg')
				puts "Converting #{img_src} to JPEG (colors: #{img_props[:colors]})"
				system "convert -quality 99 \"#{img_src}\" \"#{img_dest}\""
				# append source to removables
				@removables << img_src
				img[:src] = img_dest

			elsif img_props[:colors] == 1 then
				img_set_bgcolor = true
				img_dir = File.dirname img_src
				img_dest = File.join img_dir, "spacer.gif"
				puts "Remplacing #{img_src} with spacer.gif"
				if not File.exist? img_dest then
					system "convert -size 1x1 xc:\"rgba(0,0,0,0)\" \"#{img_dest}\""
				end
				# append src removables 
				@removables << img_src

				img[:src] = img_dest
			end

			if img_set_bgcolor then
				td = img.xpath('./ancestor::td[1]').first
				td['bgcolor'] = img_props[:histogram_color]
			end
		end

		@document = doc
		return self
	end

	def add_td_size_from_img
		doc = @document.clone

		doc.css('td img').each do |img|
			# get image width
			img_src=img['src']

			# get image information & report into TD
			img_props = image_properties img_src

			td = img.xpath('./ancestor::td[1]').first
			td['width'] = img_props[:geometry_width]
			td['height'] = img_props[:geometry_height]
		end

		@document = doc
		return self
	end

	def image_properties img_src
		if @properties.include? img_src then
			return @properties[img_src]
		end
		props = {}
		img_ident = []
		IO.popen(%Q{identify -verbose -unique "#{img_src}"}) do |f|
			img_ident = f.readlines.map(&:strip)
		end
		histogram = false
		img_ident.each do |line|
			case line
			when /Colors:\s+(\d+)$/ then
				props[:colors] = $1.to_i
			when /Geometry:\s+(\d+)x(\d+)/ then
				props[:geometry_width] = $1
				props[:geometry_height] = $2
 			when /Histogram:/ then
				histogram = true
			when /Rendering intent:/ then
				histogram = false
			else 
				if histogram then
					props[:histogram_color] = line.gsub(
						/^.*(#[0-9a-fA-F]+).*$/,
						'\1'
					)
				end
			end
		end

		@properties[img_src] = props
		return @properties[img_src]
	end
end

input_file = ARGV[0]
puts input_file
doc = Nokogiri::XML(open(input_file))

mail = GSMailer.new(doc)
mail.add_image_fix
mail.fix_link_target
mail.add_td_size_from_img
mail.fix_img_src

File.open('out','w') do |f|
	f.puts mail.to_xml
end

mail.cleanup

system("bundle exec html2haml --html-attributes < 'out' > #{input_file}.haml")
FileUtils.rm_f "out"

#pp doc
