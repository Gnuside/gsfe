#!/usr/bin/env ruby

# Add image_fix to images - DONE
# Add image size into table cell - DONE
# Convert to haml - DONE
# - use --html-attributes - DONE
# Remove the A in A(href="#") > IMG patterns
# Automate GIMP slicing
# - http://docs.gimp.org/fr/python-fu-slice.html

require 'nokogiri'
require 'open-uri'
require 'pp'
require 'thor'

require 'html2haml'
require 'html2haml/exec'
#require 'pry'

require 'gsfe/application'
require 'gsfe/slice_fixer'

module Gsfe
	class CLI < Thor

		def initialize *args
			@app = Gsfe::Application.new
			super *args
		end

		option :save, type: :boolean
		desc "import FILE", "Create HAML template from html FILE"
		def import input_file
			# Get a Nokogiri::HTML::Document for the page we’re interested in...
			output_file = input_file.gsub(/.html$/,'.html.haml')
			STDERR.puts "Importing..."
			STDERR.puts " Input: #{input_file}"
			STDERR.puts "Output: #{output_file}"

			opts = @app.load :publish, options
			@app.import input_file, output_file, opts
			@app.save :import if options[:save]
		end

		option :absolute, type: :boolean
		option :url, type: :string
		option :save, type: :boolean
		option :suffix, type: :string
		desc "publish", "Export newsletter"
		def publish
			# Get a Nokogiri::HTML::Document for the page we’re interested in...
			#output_file = input_file.gsub(/.html$/,'.html.haml')
			#STDERR.puts " Input: #{input_file}"
			#STDERR.puts "Output: #{output_file}"
			STDERR.puts "Publishing..."

			opts = @app.load :publish, options
			@app.publish opts
			@app.save :publish if options[:save]
		end
	end
end

Gsfe::CLI.start(ARGV)

